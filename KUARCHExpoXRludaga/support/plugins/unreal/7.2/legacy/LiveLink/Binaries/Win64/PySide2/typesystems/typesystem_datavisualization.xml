<?xml version="1.0"?>
<!--
/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of PySide2.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
-->
<typesystem package="PySide2.QtDataVisualization">
  <rejection class="^.*Proxy.*$" argument-type="^Q.*(DataRow|DataArray)\*.*$"/>

  <template name="cppqlistofptrtoqvectors_to_py_conversion">
  const int rowCount = %in.size();
  PyObject* %out = PyList_New(rowCount);
  for (int r = 0; r &lt; rowCount; ++r) {
      const QVector&lt;%INTYPE_0&gt; *row = %in.at(r);
      const int columnCount = row->size();
      PyObject *pyRow = PyList_New(columnCount);
      for (int c = 0; c &lt; columnCount; ++c) {
          const %INTYPE_0 &amp;cppItem = row->at(c);
          PyList_SET_ITEM(pyRow, c, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
      }
      PyList_SET_ITEM(%out, r, pyRow);
  }
  return %out;
  </template>
  <template name="py_to_cppqlistofptrtoqvectors_conversion">
  const int rowCount = int(PySequence_Size(%in));
  %OUTTYPE &amp;result = %out;
  result.reserve(rowCount);
  for (int r = 0; r &lt; rowCount; ++r) {
      Shiboken::AutoDecRef rowItem(PySequence_GetItem(%in, r));
      const int columnCount = int(PySequence_Size(rowItem));
      QVector&lt;%OUTTYPE_0&gt; *row = new QVector&lt;%OUTTYPE_0&gt;;
      row->reserve(columnCount);
      for (int c = 0; c &lt; columnCount; ++c) {
         Shiboken::AutoDecRef pyItem(PySequence_GetItem(rowItem, c));
         %OUTTYPE_0 v = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
         row->append(v);
      }
      result.append(row);
  }
  </template>
  <load-typesystem name="typesystem_gui.xml" generate="no" />
  <namespace-type name="QtDataVisualization">
    <primitive-type name="QBarDataArray">
      <include file-name="qbardataproxy.h" location="global"/>
      <conversion-rule>
          <native-to-target>
              <insert-template name="cppqlistofptrtoqvectors_to_py_conversion">
                <replace from="%INTYPE_0" to="QtDataVisualization::QBarDataItem"/>
              </insert-template>
          </native-to-target>
          <target-to-native>
              <add-conversion type="PySequence">
                  <insert-template name="py_to_cppqlistofptrtoqvectors_conversion">
                      <replace from="%OUTTYPE_0" to="QtDataVisualization::QBarDataItem"/>
                  </insert-template>
              </add-conversion>
          </target-to-native>
      </conversion-rule>
    </primitive-type>
    <primitive-type name="QSurfaceDataArray">
      <include file-name="qsurfacedataproxy.h" location="global"/>
      <conversion-rule>
          <native-to-target>
              <insert-template name="cppqlistofptrtoqvectors_to_py_conversion">
                <replace from="%INTYPE_0" to="QtDataVisualization::QSurfaceDataItem"/>
              </insert-template>
          </native-to-target>
          <target-to-native>
              <add-conversion type="PySequence">
                  <insert-template name="py_to_cppqlistofptrtoqvectors_conversion">
                      <replace from="%OUTTYPE_0" to="QtDataVisualization::QSurfaceDataItem"/>
                  </insert-template>
              </add-conversion>
          </target-to-native>
      </conversion-rule>
    </primitive-type>

    <object-type name="QAbstract3DAxis">
      <enum-type name="AxisOrientation"/>
      <enum-type name="AxisType"/>
    </object-type>
    <object-type name="QCategory3DAxis"/>
    <object-type name="QLogValue3DAxisFormatter"/>
    <object-type name="QValue3DAxis"/>
    <object-type name="QValue3DAxisFormatter"/>
    <object-type name="QAbstract3DSeries">
      <enum-type name="Mesh"/>
      <enum-type name="SeriesType"/>
    </object-type>
    <object-type name="QAbstractDataProxy">
      <enum-type name="DataType"/>
    </object-type>
    <object-type name="QBar3DSeries"/>
    <value-type name="QBarDataItem"/>
    <object-type name="QBarDataProxy"/>
    <object-type name="QCustom3DItem"/>
    <object-type name="QCustom3DLabel"/>
    <object-type name="QCustom3DVolume"/>
    <object-type name="QHeightMapSurfaceDataProxy"/>
    <object-type name="QItemModelBarDataProxy">
      <enum-type name="MultiMatchBehavior"/>
    </object-type>
    <object-type name="QItemModelScatterDataProxy"/>
    <object-type name="QItemModelSurfaceDataProxy">
      <enum-type name="MultiMatchBehavior"/>
    </object-type>
    <object-type name="QScatter3DSeries"/>
    <value-type name="QScatterDataItem"/>
    <object-type name="QScatterDataProxy"/>
    <object-type name="QSurface3DSeries">
       <enum-type name="DrawFlag" flags="DrawFlags"/>
    </object-type>
    <value-type name="QSurfaceDataItem"/>
    <object-type name="QSurfaceDataProxy"/>
    <object-type name="Q3DBars"/>
    <object-type name="Q3DCamera">
      <enum-type name="CameraPreset"/>
    </object-type>
    <object-type name="Q3DLight"/>
    <object-type name="Q3DObject"/>
    <object-type name="Q3DScatter"/>
    <object-type name="Q3DScene"/>
    <object-type name="Q3DSurface"/>
    <object-type name="QAbstract3DGraph">
      <enum-type name="ElementType"/>
      <enum-type name="OptimizationHint" flags="OptimizationHints"/>
      <enum-type name="SelectionFlag" flags="SelectionFlags"/>
      <enum-type name="ShadowQuality"/>
    </object-type>
    <object-type name="Q3DInputHandler"/>
    <object-type name="QAbstract3DInputHandler">
      <enum-type name="InputView"/>
    </object-type>
    <object-type name="QTouch3DInputHandler"/>
    <object-type name="Q3DTheme">
      <enum-type name="ColorStyle"/>
      <enum-type name="Theme"/>
    </object-type>
    <extra-includes>
      <include file-name="qutils.h" location="global"/>
    </extra-includes>
  </namespace-type>
</typesystem>
